import XMonad

import System.IO
import System.Exit

import qualified XMonad.StackSet as W
import qualified Data.Map as M

import Data.List(isInfixOf)

import XMonad.Actions.CopyWindow (copyToAll, killAllOtherCopies)
import XMonad.Actions.CycleRecentWS (toggleRecentNonEmptyWS)
import XMonad.Actions.CycleWS (moveTo, emptyWS, ignoringWSs, WSType(..))
import XMonad.Actions.DynamicProjects ( dynamicProjects
                                      , switchProjectPrompt
                                      , shiftToProjectPrompt
                                      , Project(..)
                                      )
import XMonad.Actions.SpawnOn (spawnOn, spawnAndDo, manageSpawn)
import XMonad.Actions.WithAll (killAll)
import XMonad.Actions.EasyMotion (selectWindow, ChordKeys(AnyKeys), EasyMotionConfig(..), proportional)
import XMonad.Actions.TagWindows (addTag, delTag, hasTag, withTaggedP, withTaggedGlobalP, shiftHere)

import XMonad.Hooks.DynamicLog (dynamicLogWithPP, PP(..), wrap)
import XMonad.Hooks.EwmhDesktops (ewmh)
import XMonad.Hooks.ManageDocks (manageDocks, docks, avoidStruts)
import XMonad.Hooks.ManageHelpers ( (-?>)
                                  , doRectFloat
                                  , doFullFloat
                                  , isFullscreen
                                  , composeOne
                                  )
import XMonad.Hooks.Place
import XMonad.Hooks.UrgencyHook
import XMonad.Hooks.InsertPosition
import XMonad.Hooks.WorkspaceHistory
import XMonad.Hooks.XPropManage

import XMonad.Util.EZConfig (removeKeysP, additionalKeys, additionalKeysP)
import XMonad.Util.Run (spawnPipe, safeSpawn, safeRunInTerm)
import XMonad.Util.NamedScratchpad ( namedScratchpadManageHook
                                   , namedScratchpadAction
                                   , scratchpadWorkspaceTag
                                   , customFloating
                                   , NamedScratchpad(..)
                                   )
import XMonad.Util.NamedWindows
import XMonad.Util.WorkspaceCompare

import XMonad.Layout.BoringWindows
import XMonad.Layout.Fullscreen
import XMonad.Layout.Gaps
import XMonad.Layout.Grid
import XMonad.Layout.LayoutBuilder
import XMonad.Layout.MultiToggle
import XMonad.Layout.MultiToggle.Instances
import XMonad.Layout.Named
import XMonad.Layout.NoBorders
import XMonad.Layout.PerWorkspace
import XMonad.Layout.ResizableTile
import XMonad.Layout.Simplest
import XMonad.Layout.Spacing
import XMonad.Layout.SubLayouts as SL
import XMonad.Layout.Tabbed
import XMonad.Layout.WindowNavigation (windowNavigation)

import XMonad.Prompt
import XMonad.Prompt.FuzzyMatch
import XMonad.Prompt.ConfirmPrompt

-- Polybar imports
import qualified Codec.Binary.UTF8.String as UTF8
import qualified DBus as D
import qualified DBus.Client as D

data LibNotifyUrgencyHook = LibNotifyUrgencyHook deriving (Read, Show)

instance UrgencyHook LibNotifyUrgencyHook where
    urgencyHook LibNotifyUrgencyHook w = do
        name     <- getName w
        Just idx <- fmap (W.findTag w) $ gets windowset
        safeSpawn "notify-send" [show name, "workspace " ++ idx]

myMask = mod4Mask -- win key

------------------------------------------------------------------------}}}
-- Colors, Fonts, & Themes                                              {{{
---------------------------------------------------------------------------

bg      = "{colors.background}"
fg      = "{colors.foreground}"
color00 = "{colors.black}"
color01 = "{colors.red}"
color02 = "{colors.green}"
color03 = "{colors.yellow}"
color04 = "{colors.blue}"
color05 = "{colors.magenta}"
color06 = "{colors.cyan}"
color07 = "{colors.white}"
color08 = "{colors.black}"
color09 = "{colors.red}"
color10 = "{colors.green}"
color11 = "{colors.yellow}"
color12 = "{colors.blue}"
color13 = "{colors.magenta}"
color14 = "{colors.cyan}"
color15 = "{colors.white}"

gap     = 10
border  = 0
prompt  = 20

active   = color03
inactive = color00
urgent   = color09

myNormalBorderColor  = inactive
myFocusedBorderColor = active

myFont       = "xft:{fonts.mono.name}:weight:900:pixelsize=22:bold:antialias=true:hinting=true"
myPromptFont = "xft:{fonts.mono.name}:weight:900:pixelsize=26:bold:antialias=true:hinting=true"

myTabTheme = def
    { fontName            = myFont
    , activeColor         = active
    , inactiveColor       = inactive
    , activeBorderColor   = active
    , inactiveBorderColor = inactive
    , activeTextColor     = inactive
    , inactiveTextColor   = active
    , decoHeight          = 48
    }

myEasyMotionTheme :: EasyMotionConfig
myEasyMotionTheme = def
    { txtCol    = inactive
    , bgCol     = active
    , cancelKey = xK_Escape
    , borderPx  = 0
    , overlayF  = proportional 0.3
    , emFont    = "xft:{fonts.mono.name}:weight:900:pixelsize=140:bold:antialias=true:hinting=true"
    , sKeys     = AnyKeys [xK_t, xK_n, xK_s, xK_e, xK_r, xK_i, xK_a, xK_o]
    }

myPromptTheme :: XPConfig
myPromptTheme = def
    { font                 = myPromptFont
    , alwaysHighlight      = True
    , bgColor              = bg
    , fgColor              = active
    , fgHLight             = active
    , bgHLight             = inactive
    , autoComplete         = Just 300000
    , borderColor          = bg
    , promptBorderWidth    = 0
    , height               = 70
    , position             = CenteredAt 0.5 0.5
    , searchPredicate      = fuzzyMatch
    , complCaseSensitivity = CaseInSensitive
    }

------------------------------------------------------------------------}}}
-- Workspaces and Projects                                              {{{
---------------------------------------------------------------------------

wsGEN = "GEN"
wsFIN = "FIN"
wsFND = "FND"
wsBUL = "BUL"
wsBRW = "BRW"
wsGAM = "GAM"
wsPOD = "POD"
wsDUS = "DUS"
wsMIS = "MIS"
wsNSP = "NSP"

-- myWorkspaces = map show [1..9]
myWorkspaces = [wsGEN, wsFIN, wsFND, wsBUL, wsDUS, wsBRW, wsGAM, wsPOD, wsMIS]

projects :: [Project]
projects =
  [ Project { projectName      = wsGEN
            , projectDirectory = "~/"
            , projectStartHook = Nothing
            }

  , Project { projectName      = wsBUL
            , projectDirectory = "~/Projects/bulleted.app"
            , projectStartHook = Just $ do spawnOn wsBUL myTerminal
                                           spawnOn wsBUL myTerminal
                                           spawnOn wsBUL myTerminal
            }

  , Project { projectName      = wsFIN
            , projectDirectory = "~/Documents/Finances/ledger"
            , projectStartHook = Just $ do spawnOn wsFIN "kitty -e $SHELL -c 'cal -s3 && $SHELL'"
                                           spawnOn wsFIN "kitty -e make watch"
                                           spawnOn wsFIN "kitty -e vim ledger.dat"
            }

  , Project { projectName      = wsFND
            , projectDirectory = "~/Projects/fundof"
            , projectStartHook = Just $ do spawnAndDo (doShift wsFND) "slack"
                                           spawnOn wsFND $ myBrowser ++ " --profile-directory=\"Profile 4\""
                                           spawnOn wsFND myTerminal
                                           spawnOn wsFND myTerminal
                                           spawnOn wsFND myTerminal
            }

  , Project { projectName      = wsBRW
            , projectDirectory = "~/"
            , projectStartHook = Just $ do spawnOn wsBRW $ myBrowser ++ " --profile-directory=\"Profile 1\""
            }

  , Project { projectName      = wsPOD
            , projectDirectory = "~/"
            , projectStartHook = Just $ do spawnOn wsPOD "ocenaudio"
                                           spawnOn wsPOD "audacity"
            }

  , Project { projectName      = wsDUS
            , projectDirectory = "~/Projects/dushnila"
            , projectStartHook = Just $ do spawnOn wsDUS myTerminal
                                           spawnOn wsDUS myTerminal
                                           spawnOn wsDUS myTerminal
            }

  , Project { projectName      = wsGAM
            , projectDirectory = "~/"
            , projectStartHook = Just $ do spawnOn wsGAM "steam"
            }

  , Project { projectName      = wsMIS
            , projectDirectory = "~/"
            , projectStartHook = Nothing
            }
  ]

------------------------------------------------------------------------}}}
-- Applications & Utilities                                             {{{
---------------------------------------------------------------------------

myTerminal           = "kitty"
myBrowser            = "google-chrome-stable --use-gl=desktop --enable-features=VaapiVideoDecoder"

myFocusFollowsMouse  = False
myClickJustFocuses   = False
myPlacement          = inBounds $ fixed (0.5, 0.5) -- center of the screen
centered             = W.RationalRect (1/8) (1/8) (3/4) (3/4)
centeredS            = W.RationalRect (1/4) (1/4) (1/2) (1/2)
corner               = W.RationalRect (3/4 - 50) (3/4 - 50) (1/4) (1/4)

-- Queries for manage hook
-- q ~? x = fmap (x `isInfixOf`) q
q !? x = fmap (not . isInfixOf x) q

xPropMatches :: [XPropMatch]
xPropMatches = tagclasses ["mpv"] "mpv"
    where
        ckClass cls = [(wM_CLASS, any (cls==))]
        tag name  = pmX (addTag name)
        tagclasses clss name = [ (ckClass cls, tag name) | cls <- clss ]

myManageHook =
    manageSpawn <+>
    xPropManageHook xPropMatches <+>
    composeAll
        [ namedScratchpadManageHook myScratchpads
        , isFullscreen --> doFullFloat

        , className =? "Slack"      --> doShift wsFND
        , className =? "Steam"      --> doShift wsGAM

        -- , className =? "Discord"    --> doShift wsCOM
        -- , className =? "discord"    --> doShift wsCOM
        -- , name      =? "discord"    --> doShift wsCOM
        -- , className =? "Mailspring" --> doShift wsCOM

        , className =? "mpv"                  --> (doRectFloat $ W.RationalRect 0.745 0.0465 0.25 0.25)
        , role      =? "GtkFileChooserDialog" --> (doRectFloat $ centeredS)
        , className =? "Pavucontrol"          --> (doRectFloat $ centeredS) <+> doF copyToAll
        , className =? "Seahorse"             --> (doRectFloat $ centeredS)

        , placeHook myPlacement
        , className =? "MEGAsync"             --> doFloat
        , className =? "SimpleScreenRecorder" --> doFloat

        , className =? "kitty" --> tileBelow

        -- , role ~? "gimp-" <&&> role !? "gimp-image-window" --> doFloat
        -- , composeOne [
        --     isFullscreen -?> doFullFloat
        --   ]
        , manageDocks
        ]
    where
        name = stringProperty "WM_NAME"
        role = stringProperty "WM_WINDOW_ROLE"
        tileBelow = insertPosition Below Newer

-- Scratch Pads
myScratchpads =
    [ NS "telegram" "telegram-desktop" ((className =? "Telegram") <||> (className =? "telegram-desktop") <||> (className =? "TelegramDesktop")) (customFloating $ centered)
    , NS "terminal" "kitty -T kitty-scratch" (title =? "kitty-scratch") (customFloating $ centered)
    , NS "email" "mailspring" ((className =? "mailspring") <||> (className =? "Mailspring")) (customFloating $ centered)
    , NS "mpv" "mpv $(xclip -o)" ((className =? "mpv") <||> (className =? "mpv")) (customFloating $ corner)
    , NS "keepass" "secret-tool lookup keepass database | keepassxc --pw-stdin ~/Private/Passwords.kdbx" (className =? "KeePassXC") (customFloating $ centered)
    ]

myLayout =
    windowNavigation $
    boringWindows $
    smartBorders $
    onWorkspace wsGAM (noBorders $ tiled ||| tabs) $
    onWorkspace wsFIN fin .
    full $
    tiled ||| tabs
    -- onWorkspace wsFIN (tiled ||| tabs) .
    -- onWorkspace wsBRW (tiled ||| tabs) .
    -- tiled ||| tabs ||| workGrid
    where
        myGaps = spacingWithEdge gap

        full = mkToggle (NOBORDERS ?? FULL ?? EOT)

        nmaster = 1
        ratio   = 2 / 3
        delta   = 1 / 15

        tiled = named "Tiled"
            $ avoidStruts
            $ subLayout [] (noGapsTabs)
            $ myGaps
            $ Tall nmaster delta ratio

        fin = named "Finances"
            $ avoidStruts
            $ subLayout [] (noGapsTabs)
            $ myGaps
            $ ResizableTall nmaster delta ratio [1, 2/5]

        -- Doesn't work :(
        -- FIXME: focus starts jumping between tabs and right layout
        --
        --         Work grid
        --   --------------------
        --   |            |     |
        --   |            |     |
        --   |            |     |
        --   |            |-----|
        --   |            |     |
        --   |    Tabs    |     |
        --   |            |     |
        --   --------------------
        workGrid = named "Work grid"
          $ avoidStruts
          $ myGaps
          $ (layoutN 2 (relBox (3/4) 0 1     1) (Just $ relBox 0 0 1 1) $ Tall 2 0.1 0.5)
          $ (layoutAll (relBox 0     0 (3/4) 1)                           noGapsTabs)
        --
        --         Cool grid
        --   --------------------
        --   |         |        |
        --   |         |        |
        --   |         |        |
        --   |         |--------|
        --   |         |        |
        --   |         |  Tabs  |
        --   |         |        |
        --   --------------------
        -- coolGrid = named "Cool grid"
        --   $ avoidStruts
        --   $ myGaps
        --   $ layoutN 1 (relBox 0 0 0.75 1) (Just $ relBox 0 0 1 1) Full
        --   $ layoutN 1 (relBox 0.75 0 1 0.5) (Just $ relBox 0.5 0 1 1) Full
        --   $ layoutAll (relBox 0.75 0.5 1 1) noGapsTabs

        noGapsTabs = named "Tabs"
          $ tabbedBottom shrinkText myTabTheme

        tabs = named "Tabs"
          $ avoidStruts
          $ myGaps
          $ tabbedBottom shrinkText myTabTheme

myMouseBindings XConfig {XMonad.modMask = modMask} = M.fromList
    -- left click - set the window to floating
    [ (( modMask, button1 ), \w -> focus w >> mouseMoveWindow w
                                           >> windows W.shiftMaster)

    -- right click - set the window to floating and resize
    , (( modMask, button3 ), \w -> focus w >> mouseResizeWindow w
                                           >> windows W.shiftMaster)

    -- scroll to next/prev useful workspace (non empty and non scratchpad)
    , (( modMask, button4 ), const $ windows W.focusUp)
    , (( modMask, button5 ), const $ windows W.focusDown)

    -- scroll to next/prev useful workspace (non empty and non scratchpad)
    , (( modMask, 8 ), const $ moveTo Prev $ Not emptyWS :&: ignoringWSs [scratchpadWorkspaceTag])
    , (( modMask, 9 ), const $ moveTo Next $ Not emptyWS :&: ignoringWSs [scratchpadWorkspaceTag])
    ]

myMediaKeys =
    [ ("<XF86AudioPlay>",        spawn "playerctl play-pause")
    , ("<XF86AudioNext>",        spawn "playerctl next")
    , ("<XF86AudioPrev>",        spawn "playerctl previous")
    , ("<XF86AudioMute>",        spawn "pactl set-sink-mute 1 toggle")
    , ("<XF86AudioLowerVolume>", spawn "pactl set-sink-volume 1 -10%")
    , ("<XF86AudioRaiseVolume>", spawn "pactl set-sink-volume 1 +10%")
    ]

myKeys =
    [ -----------
      -- Programs
      ((myMask,               xK_F2),     spawn myBrowser)
    , ((myMask,               xK_Return), safeSpawn myTerminal [])
    , ((myMask .|. shiftMask, xK_m),      safeSpawn "pavucontrol" [])
    , ((myMask,               xK_F12),    safeSpawn "kitty" ["-e", "bashmount"])

      -----------
      -- Rofi stuff
    , ((myMask, xK_r), spawn "rofi -show combi")
    , ((myMask, xK_e), spawn "rofi -show emoji")
    , ((myMask, xK_c), spawn "rofi -show calc -modi calc -no-show-match -no-sort")

      -----------
      -- Xmonad actions
    , ((myMask,               xK_BackSpace), kill)
    , ((myMask .|. shiftMask, xK_BackSpace), confirmPrompt myPromptTheme "close workspace?" $ killAll >> toggleRecentNonEmptyWS)
    , ((myMask,               xK_q),         spawn "xmonad --recompile && xmonad --restart") -- Recompile and restart Xmonad
    , ((myMask .|. shiftMask, xK_q),         confirmPrompt myPromptTheme "exit?" $ io (exitWith ExitSuccess))

      -----------
      -- Layout actions
    , ((myMask,               xK_k),            focusUp)
    , ((myMask,               xK_j),            focusDown)
    , ((myMask,               xK_f),            sendMessage $ Toggle FULL) -- Toggle fullscreen
    , ((myMask,               xK_b),            toggleRecentNonEmptyWS ) -- go to most recent workspace
    , ((myMask .|. shiftMask, xK_Return),       windows W.swapMaster)     -- Swap the focused window and the master window
    , ((myMask,               xK_bracketleft),  moveTo Prev $ Not emptyWS :&: ignoringWSs [scratchpadWorkspaceTag])
    , ((myMask,               xK_bracketright), moveTo Next $ Not emptyWS :&: ignoringWSs [scratchpadWorkspaceTag])
    , ((myMask,               xK_z),            withFocused centerWindow) -- center focused window
    , ((myMask,               xK_v),            windows copyToAll)        -- Make focused window always visible
    , ((myMask .|. shiftMask, xK_v),            killAllOtherCopies)       -- Toggle window state back
    , ((myMask,               xK_t),            selectWindow myEasyMotionTheme >>= (`whenJust` windows . W.focusWindow))
    , ((myMask,               xK_s),            withFocused $ windows . W.sink) -- Push window back into tiling
    , ((myMask,               xK_slash),        markBoring) -- mark boring
    , ((myMask .|. shiftMask, xK_slash),        clearBoring) -- mark boring

      -----------
      -- Screen shots & recording
    , ((controlMask,               xK_Print), spawn "sleep 0.2; scrot -s")
    , ((controlMask .|. shiftMask, xK_Print), spawn "sleep 0.2; scrot -s /tmp/screen.png; xclip -selection clipboard -t image/png -i /tmp/screen.png; rm /tmp/screen.png")
    , ((shiftMask,                 xK_Print), spawn "scrot /tmp/screen.png; xclip -selection clipboard -t image/png -i /tmp/screen.png; rm /tmp/screen.png")
    , ((0,                         xK_Print), spawn "flameshot gui")
    , ((controlMask,               xK_Print), spawn "simplescreenrecorder")

      -----------
      -- Scratchpads
    , ((myMask, xK_minus),     namedScratchpadAction myScratchpads "terminal")
    , ((myMask, xK_equal),     namedScratchpadAction myScratchpads "telegram")
    , ((myMask, xK_m),         namedScratchpadAction myScratchpads "email")
    , ((myMask, xK_F10),       namedScratchpadAction myScratchpads "keepass")
    , ((myMask, xK_backslash), namedScratchpadAction myScratchpads "mpv")

      -----------
      -- Prompts
    , ((myMask,               xK_n), switchProjectPrompt myPromptTheme)
    , ((myMask .|. shiftMask, xK_n), shiftToProjectPrompt myPromptTheme)

    -- Navigate between windows in a group
    , ((myMask,               xK_quoteright), onGroup W.focusDown')
    , ((myMask,               xK_o),          onGroup W.focusUp')
    -- Merge windows in a group
    --   push the current group into the next group
    , ((myMask,               xK_End),       sendMessage $ pushGroup D)
    --   merges a current window with a master window
    --   FIXME: works only when a focused window is in the top right corner
    --          meaning it is the next after the master group, otherwise it
    --          pulls master into itself
    , ((myMask,               xK_Home),      do withFocused mergeToMaster
                                                windows W.focusDown)
    , ((myMask,               xK_u),         withFocused (sendMessage . UnMerge))
    ]
    where
    toggleTag name = withFocused $ \w ->
      hasTag name w >>= (\b -> if b then delTag name w else addTag name w)

    mergeToMaster :: Window -> X ()
    mergeToMaster win = do
      master <- getMaster
      (`whenJust` sendMessage . SL.Merge win) master
      return ()
      where
      getMaster = do
        stack <- currentStack
        return $ case stack of
          Just s -> getMasterWindow s
          _      -> Nothing

    currentStack :: X (Maybe (W.Stack Window))
    currentStack = gets (W.stack . W.workspace . W.current . windowset)

    getMasterWindow :: W.Stack Window -> Maybe Window
    getMasterWindow s = case s of
      W.Stack _ l _  -> Just $ head $ reverse l
      W.Stack _ _ _  -> Nothing

    centerWindow :: Window -> X ()
    centerWindow win = do
      (_, W.RationalRect x y w h) <- floatLocation win
      windows $ W.float win (W.RationalRect ((1 - w) / 2) ((1 - h) / 2) w h)
      return ()

unusedKeys =
  ["M-" ++ [n] | n <- ['1'..'9']]
  ++
  ["M-S-" ++ [n] | n <- ['1'..'9']]

------------------------------------------------------------------------
-- Polybar settings (needs DBus client).
--
mkDbusClient :: IO D.Client
mkDbusClient = do
  dbus <- D.connectSession
  D.requestName dbus (D.busName_ "org.xmonad.log") opts
  return dbus
 where
  opts = [D.nameAllowReplacement, D.nameReplaceExisting, D.nameDoNotQueue]

-- Emit a DBus signal on log updates
dbusOutput :: D.Client -> String -> IO ()
dbusOutput dbus str =
  let opath  = D.objectPath_ "/org/xmonad/Log"
      iname  = D.interfaceName_ "org.xmonad.Log"
      mname  = D.memberName_ "Update"
      signal = D.signal opath iname mname
      body   = [D.toVariant $ UTF8.decodeString str]
  in  D.emit dbus $ signal { D.signalBody = body }

polybarHook :: D.Client -> PP
polybarHook dbus =
  let wrapper color = wrap ("%{F" <> color <> "}") "%{F-}"
  in  def { ppOutput           = dbusOutput dbus
          , ppCurrent          = wrapper active
          , ppVisible          = wrapper color12
          , ppUrgent           = wrapper urgent
          , ppHiddenNoWindows  = wrapper "#444444"
          , ppVisibleNoWindows = Just (wrapper "#acacac")
          , ppLayout           = wrapper color12
          , ppSep              = wrapper color12 "   "
          , ppWsSep            = " "
          , ppTitle            = const ""
          , ppSort             = fmap (.filterOutWs [wsNSP]) (ppSort def)
          -- , ppSort             = fmap (.namedScratchpadFilterOutWorkspace) getSortByTag
          }

myPolybarLogHook dbus = dynamicLogWithPP (polybarHook dbus)

------------------------------------------------------------------------

main :: IO ()
main = mkDbusClient >>= main'

main' :: D.Client -> IO ()
main' dbus = xmonad $ docks $ urgencyHook $ ewmh $ dynamicProjects projects def
  { borderWidth        = 6
  , normalBorderColor  = myNormalBorderColor
  , focusedBorderColor = myFocusedBorderColor
  , terminal           = myTerminal
  , modMask            = myMask
  , handleEventHook    = handleEventHook def <+> fullscreenEventHook
  , manageHook         = myManageHook
  , layoutHook         = myLayout
  , logHook            = myPolybarLogHook dbus
  , clickJustFocuses   = myClickJustFocuses
  , focusFollowsMouse  = myFocusFollowsMouse
  , workspaces         = myWorkspaces
  , mouseBindings      = myMouseBindings
  }
  `removeKeysP`     unusedKeys
  `additionalKeys`  myKeys
  `additionalKeysP` myMediaKeys
  where
    urgencyHook = withUrgencyHook LibNotifyUrgencyHook

-- vim:filetype=haskell tabstop=2 shiftwidth=2
